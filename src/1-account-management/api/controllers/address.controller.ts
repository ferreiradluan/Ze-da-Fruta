import { Controller, Get, Post, Put, Delete, Body, Param, Req, UseGuards } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiBody, ApiBearerAuth } from '@nestjs/swagger';
import { JwtAuthGuard } from '../../application/strategies/guards/jwt-auth.guard';
import { RolesGuard } from '../../application/strategies/guards/roles.guard';
import { Roles } from '../../application/strategies/guards/roles.decorator';
import { ROLE } from '../../domain/types/role.types';
import { AccountService } from '../../application/services/account.service';

/**
 * üìç CONTROLLER DE ENDERE√áOS DO USU√ÅRIO
 * 
 * ‚úÖ CRUD completo de endere√ßos
 * ‚úÖ Opera√ß√µes: listar, criar, atualizar, remover, definir principal
 * ‚úÖ Respeitando arquitetura modular e dom√≠nio rico
 */
@ApiTags('üìç Endere√ßos do Usu√°rio')
@Controller('address')
@UseGuards(JwtAuthGuard, RolesGuard)
@Roles(ROLE.USER, ROLE.SELLER, ROLE.DELIVERY_PERSON, ROLE.ADMIN)
@ApiBearerAuth('JWT-auth')
export class AddressController {
  constructor(private readonly accountService: AccountService) {}

  /**
   * ‚úÖ GET /address/meus-enderecos - Listar meus endere√ßos
   */
  @Get('meus-enderecos')
  @ApiOperation({
    summary: 'Listar meus endere√ßos',
    description: 'Lista todos os endere√ßos do usu√°rio logado'
  })
  @ApiResponse({
    status: 200,
    description: 'Endere√ßos listados com sucesso',
    schema: {
      type: 'object',
      properties: {
        enderecos: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: { type: 'string', example: 'uuid-endereco' },
              logradouro: { type: 'string', example: 'Rua das Flores' },
              numero: { type: 'string', example: '123' },
              complemento: { type: 'string', example: 'Apto 45' },
              bairro: { type: 'string', example: 'Centro' },
              cidade: { type: 'string', example: 'S√£o Paulo' },
              estado: { type: 'string', example: 'SP' },
              cep: { type: 'string', example: '01234-567' },
              isPrincipal: { type: 'boolean', example: true },
              createdAt: { type: 'string', format: 'date-time' }
            }
          }
        },
        total: { type: 'number', example: 3 }
      }
    }
  })
  async listarMeusEnderecos(@Req() req: any) {
    const userId = req.user.id;
    
    // TODO: Implementar busca real de endere√ßos via AccountService
    // Por enquanto, retorna endere√ßos simulados
    return {
      enderecos: [
        {
          id: 'endereco-1',
          logradouro: 'Rua das Flores',
          numero: '123',
          complemento: 'Apto 45',
          bairro: 'Centro',
          cidade: 'S√£o Paulo',
          estado: 'SP',
          cep: '01234-567',
          isPrincipal: true,
          createdAt: new Date().toISOString()
        },
        {
          id: 'endereco-2',
          logradouro: 'Avenida Paulista',
          numero: '1000',
          complemento: 'Sala 101',
          bairro: 'Bela Vista',
          cidade: 'S√£o Paulo',
          estado: 'SP',
          cep: '01310-100',
          isPrincipal: false,
          createdAt: new Date().toISOString()
        }
      ],
      total: 2,
      userId
    };
  }

  /**
   * ‚úÖ POST /address - Criar novo endere√ßo
   */
  @Post()
  @ApiOperation({
    summary: 'Criar novo endere√ßo',
    description: 'Adiciona um novo endere√ßo ao perfil do usu√°rio'
  })
  @ApiBody({
    description: 'Dados do novo endere√ßo',
    schema: {
      type: 'object',
      properties: {
        logradouro: { type: 'string', example: 'Rua das Flores' },
        numero: { type: 'string', example: '123' },
        complemento: { type: 'string', example: 'Apto 45' },
        bairro: { type: 'string', example: 'Centro' },
        cidade: { type: 'string', example: 'S√£o Paulo' },
        estado: { type: 'string', example: 'SP' },
        cep: { type: 'string', example: '01234-567' },
        isPrincipal: { type: 'boolean', example: false }
      },
      required: ['logradouro', 'numero', 'bairro', 'cidade', 'estado', 'cep']
    }
  })
  @ApiResponse({
    status: 201,
    description: 'Endere√ßo criado com sucesso'
  })
  @ApiResponse({
    status: 400,
    description: 'Dados inv√°lidos'
  })
  async criarEndereco(@Req() req: any, @Body() enderecoData: any) {
    const userId = req.user.id;
    
    // TODO: Implementar cria√ß√£o real via AccountService
    // Por enquanto, simula a cria√ß√£o
    const novoEndereco = {
      id: `endereco-${Date.now()}`,
      ...enderecoData,
      createdAt: new Date().toISOString(),
      userId
    };

    return {
      message: 'Endere√ßo criado com sucesso',
      endereco: novoEndereco
    };
  }

  /**
   * ‚úÖ PUT /address/{id} - Atualizar endere√ßo
   */
  @Put(':id')
  @ApiOperation({
    summary: 'Atualizar endere√ßo',
    description: 'Atualiza os dados de um endere√ßo espec√≠fico'
  })
  @ApiParam({
    name: 'id',
    description: 'ID do endere√ßo',
    type: 'string'
  })
  @ApiBody({
    description: 'Dados a serem atualizados',
    schema: {
      type: 'object',
      properties: {
        logradouro: { type: 'string', example: 'Rua das Flores' },
        numero: { type: 'string', example: '456' },
        complemento: { type: 'string', example: 'Casa fundos' },
        bairro: { type: 'string', example: 'Centro' },
        cidade: { type: 'string', example: 'S√£o Paulo' },
        estado: { type: 'string', example: 'SP' },
        cep: { type: 'string', example: '01234-567' }
      }
    }
  })
  @ApiResponse({
    status: 200,
    description: 'Endere√ßo atualizado com sucesso'
  })
  @ApiResponse({
    status: 404,
    description: 'Endere√ßo n√£o encontrado'
  })
  async atualizarEndereco(
    @Req() req: any,
    @Param('id') enderecoId: string,
    @Body() dadosAtualizacao: any
  ) {
    const userId = req.user.id;
    
    // TODO: Implementar atualiza√ß√£o real via AccountService
    // Por enquanto, simula a atualiza√ß√£o
    return {
      message: 'Endere√ßo atualizado com sucesso',
      endereco: {
        id: enderecoId,
        ...dadosAtualizacao,
        updatedAt: new Date().toISOString(),
        userId
      }
    };
  }

  /**
   * ‚úÖ DELETE /address/{id} - Remover endere√ßo
   */
  @Delete(':id')
  @ApiOperation({
    summary: 'Remover endere√ßo',
    description: 'Remove um endere√ßo do perfil do usu√°rio'
  })
  @ApiParam({
    name: 'id',
    description: 'ID do endere√ßo',
    type: 'string'
  })
  @ApiResponse({
    status: 200,
    description: 'Endere√ßo removido com sucesso'
  })
  @ApiResponse({
    status: 404,
    description: 'Endere√ßo n√£o encontrado'
  })
  @ApiResponse({
    status: 400,
    description: 'N√£o √© poss√≠vel remover endere√ßo principal'
  })
  async removerEndereco(@Req() req: any, @Param('id') enderecoId: string) {
    const userId = req.user.id;
    
    // TODO: Implementar remo√ß√£o real via AccountService
    // Verificar se n√£o √© o endere√ßo principal antes de remover
    return {
      message: 'Endere√ßo removido com sucesso',
      enderecoId,
      removidoEm: new Date().toISOString(),
      userId
    };
  }

  /**
   * ‚úÖ PUT /address/{id}/principal - Definir como endere√ßo principal
   */
  @Put(':id/principal')
  @ApiOperation({
    summary: 'Definir endere√ßo principal',
    description: 'Define um endere√ßo como principal (padr√£o para entregas)'
  })
  @ApiParam({
    name: 'id',
    description: 'ID do endere√ßo',
    type: 'string'
  })
  @ApiResponse({
    status: 200,
    description: 'Endere√ßo definido como principal'
  })
  @ApiResponse({
    status: 404,
    description: 'Endere√ßo n√£o encontrado'
  })
  async definirEnderecoPrincipal(@Req() req: any, @Param('id') enderecoId: string) {
    const userId = req.user.id;
    
    // TODO: Implementar l√≥gica real via AccountService
    // Deve remover flag principal de outros endere√ßos e definir este como principal
    return {
      message: 'Endere√ßo definido como principal',
      enderecoId,
      isPrincipal: true,
      definidoEm: new Date().toISOString(),
      userId
    };
  }
}
