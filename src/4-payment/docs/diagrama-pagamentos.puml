@startuml
' Título do Diagrama
title Diagrama de Classes Final (v2) - Domínio: 4-payment (Pagamentos)

' Configurações visuais para clareza
skinparam classAttributeIconSize 0
hide empty members

' Nota geral sobre a simplificação do diagrama
note as DiagramNote
Nota de Modelagem:
Para manter a clareza, o diagrama omite getters/setters
e métodos CRUD básicos (ex: findById, save), que
são considerados implícitos na camada de Repository.
O foco está nos métodos de negócio (Domínio Rico).
end note

' ===================================
' Camada de Lógica de Negócio (Services)
' ===================================
class PaymentService << (S,lightblue) >> {
+ criarSessaoCheckoutStripe(pedido: Pedido): Promise<string>
+ processarWebhookStripe(payload: Buffer, signature: string): Promise<void>
+ iniciarReembolso(pedidoId: string, valor?: number): Promise<void>
}
note right of PaymentService
Orquestra toda a comunicação com o Stripe.
É chamado por outros serviços (SalesService para
criar a sessão, AdminService para reembolsar)
e processa os eventos assíncronos (webhooks).
end note

' ===================================
' Camada de Acesso a Dados (Repositories)
' ===================================
package "Camada de Acesso a Dados" << (R,lightgray) >> {
  class PagamentoRepository << (R,lightgray) >> {
  + findByPedidoId(pedidoId: string): Promise<Pagamento[]>
  + findByTransacaoExternaId(id: string): Promise<Pagamento>
  + save(pagamento: Pagamento): Promise<Pagamento>
  + criar(pagamento: Pagamento): Promise<Pagamento>
  + buscarPorId(id: string): Promise<Pagamento>
  + atualizar(pagamento: Pagamento): Promise<Pagamento>
  }
}

' ===================================
' Camada de API (Controllers)
' ===================================
package "Camada de API" << (C,lightgreen) >> {
  class PaymentController << (C,lightgreen) >> {
  + handleStripeWebhook(payload: Buffer, signature: string): Promise<any>
  + getPaymentStatus(transacaoId: string): Promise<any>
  + getPaymentsByPedido(pedidoId: string): Promise<any>
  }
}
note right of PaymentController
Este controller é "magro" e tem,
principalmente, um endpoint para
receber os webhooks do Stripe.
A criação da sessão de pagamento é
iniciada por outro domínio (Vendas).
end note

' ===================================
' Camada de Domínio (Rich Domain Model)
' ===================================

' --- Placeholder para a entidade Pedido do domínio de Vendas ---
class Pedido <<(S,orchid)Sales>> {
+ id: UUID
+ valorTotal: number
+ itens: ItemPedido[]
}

class Pagamento << (E,gold) >> {
- id: UUID
- pedidoId: UUID
- valor: number
- status: StatusPagamento
- provedor: string
- stripeSessionId: string
- stripePaymentIntentId: string
- metodoPagamento: string
- gatewayResponse: string
- dataProcessamento: Date
- motivoRecusa: string
--
+ confirmar(): void
+ falhar(motivo: string): void
+ reembolsar(valorParcial?: number): void
+ estaCompleto(): boolean
+ static criar(pedidoId: string, valor: number): Pagamento
}
note left of Pagamento
Modelo de Domínio Rico:
A entidade Pagamento gerencia
seu próprio ciclo de vida e estado.
O serviço chama pagamento.confirmar()
em vez de alterar o status diretamente.
end note

enum StatusPagamento << (E,yellow) >> {
PENDENTE
APROVADO
RECUSADO
ESTORNADO
PARCIALMENTE_REEMBOLSADO
}

' ===================================
' Value Objects (Dinheiro)
' ===================================
class Dinheiro << (V,lightcyan) >> {
- valor: number
- moeda: string
--
+ somar(outro: Dinheiro): Dinheiro
+ subtrair(outro: Dinheiro): Dinheiro
+ equals(outro: Dinheiro): boolean
+ static criar(valor: number, moeda?: string): Dinheiro
}

' ===================================
' Relacionamentos
' ===================================

' --- Dependências entre Camadas ---
PaymentController ..> PaymentService : usa
PaymentService ..> PagamentoRepository : usa
PaymentService ..> Pagamento : cria/manipula
PagamentoRepository ..> Pagamento : persiste

' Relação de Uso do Enum
Pagamento --> StatusPagamento : usa

' Relação com Value Object
Pagamento --> Dinheiro : valor

' --- Relações com outros domínios ---
Pagamento "1" ..> "1" Pedido : para o
note on link
Cada Pagamento está
associado a um único
Pedido do domínio 'Sales'.
end note

@enduml
